// Copyright 2006 Nemanja Trifunovic

/*
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/


#ifndef UTF8_FOR_CPP_2675DCD0_9480_4c0c_B92A_CC14C027B731
#define UTF8_FOR_CPP_2675DCD0_9480_4c0c_B92A_CC14C027B731

#include "utf8/checked.h"
#include "utf8/unchecked.h"
// standard string conversions usign utf8
#include <string>
#include <vector>

namespace utf8 {
/**
 * \brief Converts std::wstring encoded in UTF-16 if WINDOWS or UTF-32 if POSIX into a std::string encoded in UTF-8
 * \param std::wstring utf16_str encoded in UTF-16 if WINDOWS or UTF-32 if POSIX
 * \return std::string utf8_str encoded in UTF-8
 */
inline std::string toUtf8(const std::wstring &utf16_str) {
  std::string utf8_str;
#ifdef __linux__
  utf8::utf32to8(utf16_str.begin(), utf16_str.end(), back_inserter(utf8_str));
#else
  utf8::utf16to8(utf16_str.begin(), utf16_str.end(), back_inserter(utf8_str));
#endif
  return utf8_str;
}
/**
* \brief Converts std::string encoded in UTF-8 into std::wstring encoded in UTF-16 if WINDOWS or in UTF-32 if POSIX
* \param std::string utf8_str encoded in UTF-8
* \return std::wstring utf16_str encoded in UTF-16 if WINDOWS or UTF-32 if POSIX
*/
inline std::wstring fromUtf8(const std::string &utf8_str) {
  std::wstring utf16_str;
#ifdef __linux__
  utf8::utf8to32(utf8_str.begin(), utf8_str.end(), back_inserter(utf16_str));
#else
  utf8::utf8to16(utf8_str.begin(), utf8_str.end(), back_inserter(utf16_str));
#endif
  return utf16_str;
}
}

#endif // header guard
